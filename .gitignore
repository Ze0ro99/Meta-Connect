# Compiled class file
📂 Root Project
│
├── 📂 frontend  (واجهة المستخدم React/Next.js)
│   ├── pages
│   ├── components
│   └── styles
│
├── 📂 backend  (الخلفية Node.js/Express.js)
│   ├── controllers
│   ├── models
│   ├── routes
│   └── config
│
├── 📂 blockchain  (تكامل مع Pi Network)
│   ├── walletIntegration.js
│   └── transactions.js
│
└── 📂 localization  (دعم اللغات)
    ├── ar.json
    ├── en.json
    └── other_languages.json
*.class

# // blockchain/walletIntegration.js
const connectPiWallet = async () => {
  try {
    const wallet = await window.pi.connectWallet();
    console.log('Wallet connected:', wallet);
    return wallet;
  } catch (error) {
    console.error('Failed to connect wallet:', error);
  }
};

*.log

# // backend/controllers/userController.js
const User = require('../models/userModel');

// إنشاء حساب جديد
const createUser = async (req, res) => {
  try {
    const { username, email, password } = req.body;
    const newUser = await User.create({ username, email, password });
    res.status(201).json(newUser);
  } catch (error) {
    res.status(500).json({ error: 'Error creating user' });
  }
};

module.exports = { createUser };

*.ctxt

# // frontend/pages/Register.js
import { useState } from 'react';
import axios from 'axios';

export default function Register() {
  const [username, setUsername] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await axios.post('/api/register', { username, email, password });
      alert('User registered successfully!');
    } catch (error) {
      console.error('Registration failed:', error);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input 
        type="text" 
        placeholder="Username" 
        value={username} 
        onChange={(e) => setUsername(e.target.value)} 
      />
      <input 
        type="email" 
        placeholder="Email" 
        value={email} 
        onChange={(e) => setEmail(e.target.value)} 
      />
      <input 
        type="password" 
        placeholder="Password" 
        value={password} 
        onChange={(e) => setPassword(e.target.value)} 
      />
      <button type="submit">Register</button>
    </form>
  );
}

.mtj.tmp/
// frontend/components/LiveStream.js
import { useRef } from 'react';

export default function LiveStream() {
  const videoRef = useRef();

  const startStream = async () => {
    const stream = await navigator.mediaDevices.getUserMedia({ video: true });
    videoRef.current.srcObject = stream;
  };

  return (
    <div>
      <video ref={videoRef} autoPlay playsInline></video>
      <button onClick={startStream}>Start Stream</button>
    </div>
  );
}

*.jar
*.war
*.nar
*.ear
*.zip
*.tar.gz
*.rar

# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*
replay_pid*
